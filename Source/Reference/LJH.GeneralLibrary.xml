<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LJH.GeneralLibrary</name>
    </assembly>
    <members>
        <member name="T:LJH.GeneralLibrary.BCDConverter">
            <summary>
            BCD格式的转换器
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.BCDConverter.IntToBCD(System.Int32)">
            <summary>
            这个函数主要是把两位的整数（0-99）转换成一个BCD表示，刚好一个字节
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.BCDConverter.BCDtoInt(System.Byte)">
            <summary>
            
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="T:LJH.GeneralLibrary.CardReader.CardOperationResultCode">
            <summary>
            卡片操作结果代码枚举
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.CardReader.CardOperationResultCode.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.CardReader.CardOperationResultCode.Fail">
            <summary>
            失败
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.CardReader.CardOperationResultCode.InitFail">
            <summary>
            初始化读卡器失败
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.CardReader.CardOperationResultCode.OpenFail">
            <summary>
            打开读卡器失败
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.CardReader.CardOperationResultCode.NoCard">
            <summary>
            没有卡片
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.CardReader.CardOperationResultCode.CardIDError">
            <summary>
            卡号不一致
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.CardReader.CardOperationResultCode.AuthFail">
            <summary>
            扇区验证失败
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.CardReader.CardOperationResultCode.InitKeyFail">
            <summary>
            初始化密钥失败
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.CardReader.IDR210Reader">
            <summary>
            表示精仑IDR210 二代身份证读卡器
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.CardReader.IDR210Reader.Comport">
            <summary>
            获取或设置读卡器串口, 其中1001表示USB接口
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.CardReader.MUR200CardReader.KEY_TYPE_A">
            <summary>
            密钥A
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.CardReader.MUR200CardReader.KEY_TYPE_B">
            <summary>
            密钥B
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.CardReader.MUR200CardReader.KEY_SOURCE_EXT">
            <summary>
            使用外部输入的密钥验证
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.CardReader.MUR200CardReader.KEY_SOURCE_E2">
            <summary>
            使用内部E2的密钥验证
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.CardReader.MUR200CardReader.State">
            <summary>
            获取或设置发卡机目前的状态
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.CardReader.MUR200CardReader.WegenType">
            <summary>
            获取或设置发卡机的韦根类型
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.MUR200CardReader.GetUID(System.Byte[],System.Byte)">
            <summary>
            获取UID
            </summary>
            <param name="UID"></param>
            <param name="UIDLen"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.MUR200CardReader._SucessBuz">
            <summary>
            操作成功提示
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.MUR200CardReader._FailBuz">
            <summary>
            操作失败提示
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.MUR200CardReader._InitKey(System.Int32,System.Byte[],System.Byte[])">
            <summary>
            初始化扇区密钥
            </summary>
            <param name="section"></param>
            <param name="originalKey"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.MUR200CardReader.Init">
            <summary>
            初始化发卡机
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.MUR200CardReader.Dispose">
            <summary>
            释放发卡机的资源
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.MUR200CardReader.ReadCard">
            <summary>
            读卡片的ID号及数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.MUR200CardReader.SetSectionKey(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            设置某个扇区的密钥,使用默认密钥，修改为设置好的密钥
            </summary>
            <param name="cardID">卡片的卡号（为null或空时不检查卡号是否一致）</param>
            <param name="section">扇区（0~15）</param>
            <param name="successBuz">成功是否发出提示音</param>
            <param name="failBuz">失败是否发出提示音</param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.MUR200CardReader.SetSectionKey(System.String,System.Int32,System.Byte[],System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            设置某个扇区的密钥,如果此扇区已经被加密，返回false
            </summary>
            <param name="cardID">卡片的卡号（为null或空时不检查卡号是否一致）</param>
            <param name="section">扇区（0~15）</param>
            <param name="originalKey">旧密钥（6字节）</param>
            <param name="key">新密钥（6字节）</param>
            <param name="successBuz">成功是否发出提示音</param>
            <param name="failBuz">失败是否发出提示音</param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.MUR200CardReader.ReadSection(System.String,System.Int32,System.Int32,System.Byte,System.Byte[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            从卡片中读卡扇区某些块中的数据,失败返回空
            </summary>
            <param name="cardID">卡片的卡号（为null或空时不检查卡号是否一致）</param>
            <param name="section">扇区（0~15）</param>
            <param name="block">起始块号（0~3）</param>
            <param name="count">读取块数(1~3)</param>
            <param name="key">密钥</param>
            <param name="successBuz">成功是否发出提示音</param>
            <param name="failBuz">失败是否发出提示音</param>
            <param name="initKey">密钥验证失败后，是否初始化扇出密钥</param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.MUR200CardReader.WriteSection(System.String,System.Int32,System.Int32,System.Byte,System.Byte[],System.Byte[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            把数据写入卡片的某个扇区的某些块中
            </summary>
            <param name="cardID">需写入卡片的卡号（为null或空时不检查卡号）</param>
            <param name="section">扇区（0~15）</param>
            <param name="block">起始块号（0~3）</param>
            <param name="ucExt">写入块数(1~3)</param>
            <param name="pBuf">写入数据</param>
            <param name="key">密钥</param>
            <param name="successBuz">成功是否发出提示音</param>
            <param name="failBuz">失败是否发出提示音</param>
            <param name="initKey">密钥验证失败后，是否初始化扇出密钥</param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.MUR200CardReader.SucessBuz">
            <summary>
            操作读卡器发出成功提示声音
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.MUR200CardReader.FailBuz">
            <summary>
            操作读卡器发出失败提示声音
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.CardReader.ReadCardResult">
            <summary>
            读卡结果类
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.CardReader.ReadCardResult.ResultCode">
            <summary>
            获取或设置操作结果代码
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.CardReader.ReadCardResult.CardID">
            <summary>
            获取或设置读到的条码
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.CardReader.ReadCardResult.ParkingDate">
            <summary>
            获取或设置读到的写卡停车场数据，为扇区2数据
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.CardReader.ReadCardResult.Item(System.Int32)">
            <summary>
            获取或设置section扇区的数据,扇区号（0~15）超过返回null
            </summary>
            <param name="section">扇区号（0~15）</param>
            <returns></returns>
        </member>
        <member name="P:LJH.GeneralLibrary.CardReader.BarCodeReadEventArgs.BarCode">
            <summary>
            获取或设置读到的条码
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.CardReader.BarCodeReadEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:LJH.GeneralLibrary.CardReader.BarCodeReader">
            <summary>
            条码扫描枪
            </summary>
        </member>
        <member name="E:LJH.GeneralLibrary.CardReader.BarCodeReader.BarCodeRead">
            <summary>
            条码枪扫描到条码后产生的事件
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.BarCodeReader.Open">
            <summary>
            打开扫瞄枪
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.BarCodeReader.Close">
            <summary>
            关闭扫瞄枪
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.CardReaderManager.WaitForReading">
            <summary>
            等待读卡完成
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.CardReader.CardReaderManager.ActiveReader">
            <summary>
            获取当前读到卡片的读卡器
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.CardReader.CardReaderManager.HadActiveReader">
            <summary>
            获取是否有读到卡片的读卡器
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.CardReaderManager.PushCardReadRequest(LJH.GeneralLibrary.CardReader.CardReadEventHandler)">
            <summary>
            读卡请求入栈，读卡器读到卡号后调用读卡请求堆栈中的第一个回调函数(目前事件产生时不在UI线程,使用窗体编程时要注意用Invoke方法)
            </summary>
            <param name="cardReadCallBack"></param>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.CardReaderManager.PopCardReadRequest(LJH.GeneralLibrary.CardReader.CardReadEventHandler)">
            <summary>
            读卡请求出栈
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.CardReaderManager.BeginReadCard">
            <summary>
            开始读卡
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.CardReaderManager.StopReadCard">
            <summary>
            停止读卡
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.CardReaderManager.SetSectionKey(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            设置某个扇区的密钥,使用默认密钥，修改为设置好的密钥
            </summary>
            <param name="cardID">卡片的卡号（为null或空时不检查卡号是否一致）</param>
            <param name="section">扇区（0~15）</param>
            <param name="successBuz">成功是否发出提示音</param>
            <param name="failBuz">失败是否发出提示音</param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.CardReaderManager.SetSectionKey(System.String,System.Int32,System.Byte[],System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            设置某个扇区的密钥,如果此扇区已经被加密，返回false
            </summary>
            <param name="cardID">卡片的卡号（为null或空时不检查卡号是否一致）</param>
            <param name="section">扇区（0~15）</param>
            <param name="originalKey">旧密钥（6字节）</param>
            <param name="key">新密钥（6字节）</param>
            <param name="successBuz">成功是否发出提示音</param>
            <param name="failBuz">失败是否发出提示音</param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.CardReaderManager.ReadSection(System.String,System.Int32,System.Int32,System.Byte,System.Byte[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            从卡片中读卡扇区某些块中的数据,失败返回空
            </summary>
            <param name="cardID">卡片的卡号（为null或空时不检查卡号是否一致）</param>
            <param name="section">扇区（0~15）</param>
            <param name="block">起始块号（0~3）</param>
            <param name="count">读取块数(1~3)</param>
            <param name="key">密钥</param>
            <param name="successBuz">成功是否发出提示音</param>
            <param name="failBuz">失败是否发出提示音</param>
            <param name="initKey">密钥验证失败后，是否初始化扇出密钥</param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.CardReaderManager.WriteSection(System.String,System.Int32,System.Int32,System.Byte,System.Byte[],System.Byte[],System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            把数据写入卡片的某个扇区的某些块中
            </summary>
            <param name="cardID">需写入卡片的卡号（为null或空时不检查卡号）</param>
            <param name="section">扇区（0~15）</param>
            <param name="block">起始块号（0~3）</param>
            <param name="ucExt">写入块数(1~3)</param>
            <param name="pBuf">写入数据</param>
            <param name="key">密钥</param>
            <param name="successBuz">成功是否发出提示音</param>
            <param name="failBuz">失败是否发出提示音</param>
            <param name="loop">是否循环写入，直到写入成功或取消写入</param>
            <param name="initKey">密钥验证失败后，是否初始化扇出密钥</param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.CardReaderManager.WriteSection(System.String,System.Int32,System.Int32,System.Byte,System.Byte[],System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            把数据写入卡片的某个扇区的某些块中
            </summary>
            <param name="cardID">需写入卡片的卡号（为null或空时不检查卡号）</param>
            <param name="section">扇区（0~15）</param>
            <param name="block">起始块号（0~3）</param>
            <param name="ucExt">写入块数(1~3)</param>
            <param name="pBuf">写入数据</param>
            <param name="key">密钥</param>
            <param name="successBuz">成功是否发出提示音</param>
            <param name="failBuz">失败是否发出提示音</param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.CardReaderManager.ResetSection(System.String,System.Int32,System.Int32,System.Byte,System.Byte[],System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            把扇区中某些块的数据清零
            </summary>
            <param name="cardID">卡片的卡号（为null或空时不检查卡号是否一致）</param>
            <param name="section">扇区（0~15）</param>
            <param name="block">起始块号（0~3）</param>
            <param name="ucExt">写入块数(1~3)</param>
            <param name="key">密钥</param>
            <param name="successBuz">成功是否发出提示音</param>
            <param name="failBuz">失败是否发出提示音</param>
            <param name="loop">是否循环写入，直到写入成功或取消写入</param>
            <param name="initKey">密钥验证失败后，是否初始化扇出密钥</param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.CardReaderManager.ResetSection(System.String,System.Int32,System.Int32,System.Byte,System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            把扇区中某些块的数据清零
            </summary>
            <param name="cardID">卡片的卡号（为null或空时不检查卡号是否一致）</param>
            <param name="section">扇区（0~15）</param>
            <param name="block">起始块号（0~3）</param>
            <param name="ucExt">写入块数(1~3)</param>
            <param name="key">密钥</param>
            <param name="successBuz">成功是否发出提示音</param>
            <param name="failBuz">失败是否发出提示音</param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.CardReaderManager.SucessBuz">
            <summary>
            操作读卡器发出成功提示声音
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.CardReaderManager.FailBuz">
            <summary>
            操作读卡器发出失败提示声音
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.CardReader.CardReadEventArgs.CardID">
            <summary>
            获取或设置读到的条码
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.CardReader.CardReadEventArgs.ParkingDate">
            <summary>
            获取或设置读到的写卡停车场数据，为扇区2数据
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.CardReader.CardReadEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="P:LJH.GeneralLibrary.CardReader.ICardReader.WegenType">
            <summary>
            获取或设置发卡机目前的状态
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.CardReader.ICardReader.State">
            <summary>
            获取或设置发卡机的韦根类型
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.ICardReader.Init">
            <summary>
            初始化发卡机
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.ICardReader.ReadCard">
            <summary>
            读卡片的ID号及数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.ICardReader.SetSectionKey(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            设置某个扇区的密钥,使用默认密钥，修改为设置好的密钥
            </summary>
            <param name="cardID">卡片的卡号（为null或空时不检查卡号是否一致）</param>
            <param name="section">扇区（0~15）</param>
            <param name="successBuz">成功是否发出提示音</param>
            <param name="failBuz">失败是否发出提示音</param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.ICardReader.SetSectionKey(System.String,System.Int32,System.Byte[],System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            设置某个扇区的密钥,如果此扇区已经被加密，返回false
            </summary>
            <param name="cardID">卡片的卡号（为null或空时不检查卡号是否一致）</param>
            <param name="section">扇区（0~15）</param>
            <param name="originalKey">旧密钥（6字节）</param>
            <param name="key">新密钥（6字节）</param>
            <param name="successBuz">成功是否发出提示音</param>
            <param name="failBuz">失败是否发出提示音</param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.ICardReader.ReadSection(System.String,System.Int32,System.Int32,System.Byte,System.Byte[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            从卡片中读卡扇区某些块中的数据,失败返回空
            </summary>
            <param name="cardID">卡片的卡号（为null或空时不检查卡号是否一致）</param>
            <param name="section">扇区（0~15）</param>
            <param name="block">起始块号（0~3）</param>
            <param name="count">读取块数(1~3)</param>
            <param name="key">密钥</param>
            <param name="successBuz">成功是否发出提示音</param>
            <param name="failBuz">失败是否发出提示音</param>
            <param name="initKey">密钥验证失败后，是否初始化扇出密钥</param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.ICardReader.WriteSection(System.String,System.Int32,System.Int32,System.Byte,System.Byte[],System.Byte[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            把数据写入卡片的某个扇区的某些块中
            </summary>
            <param name="cardID">需写入卡片的卡号（为null或空时不检查卡号是否一致）</param>
            <param name="section">扇区（0~15）</param>
            <param name="block">起始块号（0~3）</param>
            <param name="ucExt">写入块数(1~3)</param>
            <param name="pBuf">写入数据</param>
            <param name="key">密钥</param>
            <param name="successBuz">成功是否发出提示音</param>
            <param name="failBuz">失败是否发出提示音</param>
            <param name="initKey">密钥验证失败后，是否初始化扇出密钥</param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.ICardReader.SucessBuz">
            <summary>
            操作读卡器发出成功提示声音
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.ICardReader.FailBuz">
            <summary>
            操作读卡器发出失败提示声音
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.MUR100CardReader.RC500USB_init">
            <summary>
            函数功能：此函数的功能是打开USB。
            </summary>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.MUR100CardReader.RC500USB_request(System.Byte,System.UInt16@)">
            <summary>
            函数功能：此函数发送Request 命令检查在有效范围内是否有卡的存在。返回值0 表示成功，否则返回错误码。
            </summary>
            <param name="Mode"></param>
            <param name="tagType"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.MUR100CardReader.RC500USB_anticoll(System.Byte,System.UInt64@)">
            <summary>
            函数功能：此函数开始防冲突操作。返回值0 表示成功，否则返回错误码。
            </summary>
            <param name="bcnt"></param>
            <param name="snr"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.MUR100CardReader.RC500USB_halt">
            <summary>
            函数功能：此函数使被选择的卡产生一个暂停，即使之处于Halt 模式，处于Halt 模式的卡只能用ALL方式进行选择，即RC500USB_request 函数中的mode 参数值设为1
            返回值0 表示成功，否则返回错误码
            </summary>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.MUR100CardReader.RC500USB_buzzer(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            函数功能：此函数输出一驱动信号，可驱动蜂鸣器和绿色发光管持续时间，间隙时间和重复次数可调。
            返回值0 表示成功，否则返回错误码。
            </summary>
            <param name="contrl">控制字如下表相应位为1 时该器件动作,contrl^1为绿灯,contrl^0 为蜂鸣器</param>
            <param name="opentm">低电平持续时间取值0-255 10ms 的分辨率</param>
            <param name="closetm">高电平间隙时间取值0-255 10ms 的分辨率</param>
            <param name="repcnt">重复次数</param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CardReader.MUR100CardReader.RC500USB_exit">
            <summary>
            函数功能：此函数的功能是关闭USB。
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.CommandLineArgs">
            <summary>
            表示命令行参数
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.BatchOptResult`2">
            <summary>
            表示批量增加时的返回值
            </summary>
            <typeparam name="TID"></typeparam>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:LJH.GeneralLibrary.CommandResult">
            <summary>
            表示数据操作返回值
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.CommandResult.Result">
             <summary>
            获取或设置执行结果
             </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.CommandResult.Message">
            <summary>
            获取或设置执行结果的文字描述
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.CommandResult`1">
            <summary>
            表示数据操作返回值
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.SQLHelper.ConnectionHelper.CanConnectTo(System.String)">
            <summary>
            检测连接字符串是否可以连接到指定的数据库
            </summary>
            <param name="connStr"></param>
            <returns></returns>
        </member>
        <member name="T:LJH.GeneralLibrary.SQLHelper.DatabaseColumn">
            <summary>
            表示数据表的一个例
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SQLHelper.DatabaseColumn.IsPrimaryKey">
            <summary>
            是否是主键
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SQLHelper.DatabaseColumn.DBType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SQLHelper.DatabaseColumn.CanBeNull">
            <summary>
            是否可空
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SQLHelper.DatabaseObject.ID">
            <summary>
            ID号
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SQLHelper.DatabaseObject.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.SQLHelper.DatabaseTable">
            <summary>
            表示一个数据表
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SQLHelper.DatabaseTable.IsUserTable">
            <summary>
            是否是用户自建的表,否则是系统创建的表
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SQLHelper.DatabaseTable.Columns">
            <summary>
            表的所有列
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.SQLHelper.InitialCatalog">
            <summary>
            表示一个数据库
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SQLHelper.InitialCatalog.IsUserDatabase">
            <summary>
            是否是系统数据库
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SQLHelper.InitialCatalog.Tables">
            <summary>
            数据库的所有表
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.SQLHelper.SqlClient">
            <summary>
            SQL客户端
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SQLHelper.SqlClient.DataBase">
            <summary>
            获取当前连接的数据库
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.SQLHelper.SqlClient.Connect">
            <summary>
            连接SQL服务器
            </summary>
            <param name="connStr">连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.SQLHelper.SqlClient.ChangeDataBase(System.String)">
            <summary>
            改变当前连接的数据库
            </summary>
            <param name="newDateBase"></param>
        </member>
        <member name="M:LJH.GeneralLibrary.SQLHelper.SqlClient.GetAllDataBase">
            <summary>
            获取所有数据库名
            </summary>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.SQLHelper.SqlClient.HasDataBase(System.String)">
            <summary>
            获取或设置是否存在指定名称的数据库
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.SQLHelper.SqlClient.GetDefaultDataBasePath">
            <summary>
            获取数据库默认的路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.SQLHelper.SqlClient.CreateDataBase(System.String,System.String,System.String,System.String)">
            <summary>
            创建数据库,不成功的话返回原因,成功返回空
            </summary>
            <param name="name">创建的数据库名称</param>
            <param name="sqlFile">创建数据库的脚本文件</param>
            <param name="dataFile">创建的数据库的数据文件路径</param>
            <param name="logFile">创建的数据库的日志文件路径</param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.SQLHelper.SqlClient.ExecuteSQLFile(System.String)">
            <summary>
            执行文件中的所有语句
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.SQLHelper.SqlClient.BackupDataBase(System.String,System.String)">
            <summary>
            备份数据库
            </summary>
            <param name="name"></param>
            <param name="bakFile"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.SQLHelper.SqlClient.RestoreDataBase(System.String,System.String)">
            <summary>
            还原数据库
            </summary>
            <param name="name"></param>
            <param name="bakFile"></param>
            <returns></returns>
        </member>
        <member name="T:LJH.GeneralLibrary.SQLHelper.SQLStringExtractor">
            <summary>
            表示sql语句提取器,可以从一段文字或文件中提取可以执行的SQL语名,比如会去掉注释
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.SQLHelper.SQLStringExtractor.ExtractFromFile(System.String)">
            <summary>
            从文件中提取所有可执行的SQL语句
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.SQLHelper.SQLStringExtractor.ExtractFromStr(System.String)">
            <summary>
            从字符串中提取所有可执行的SQL语句
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:LJH.GeneralLibrary.Core.DAL.DALConfig.Default">
            <summary>
            获取默认设置
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Core.DAL.DALConfig.Log">
            <summary>
            获取或设置是否记录日志
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.Core.DAL.Linq.DataContextFactory.CreateDataContext(LJH.GeneralLibrary.Core.DAL.SQLConnectionURI,System.Data.Linq.Mapping.MappingSource,System.Boolean)">
            <summary>
            创建数据上下文
            </summary>
            <param name="sqlURI"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.Core.DAL.Linq.DataContextFactory.CreateDataContext(System.String,System.Data.Linq.Mapping.MappingSource,System.Boolean)">
            <summary>
            创建数据上下文
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="T:LJH.GeneralLibrary.Core.DAL.Linq.ProviderBase`2">
            <summary>
            表示所有数据提供者的基类
            </summary>
            <typeparam name="TInfo"></typeparam>
            <typeparam name="TID"></typeparam>
        </member>
        <member name="P:LJH.GeneralLibrary.Core.DAL.Linq.ProviderBase`2.SqlURI">
            <summary>
            获取或设置SQL数据库URI
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.Core.DAL.Linq.ProviderBase`2.CreateDataContext">
            <summary>
            创建一个数据库上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.Core.DAL.Linq.ProviderBase`2.CreateUnitWork">
            <summary>
            创建一个单元操作对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.Core.DAL.Linq.ProviderBase`2.GetByID(`1)">
            <summary>
            通过ID获取实体对象
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.Core.DAL.Linq.ProviderBase`2.GetItems(LJH.GeneralLibrary.SearchCondition)">
            <summary>
            通过查询条件获取实体对象
            </summary>
            <param name="search"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.Core.DAL.Linq.ProviderBase`2.Insert(`0)">
            <summary>
            插入实体对象
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.Core.DAL.Linq.ProviderBase`2.Update(`0,`0)">
            <summary>
            更新实体对象
            </summary>
            <param name="newVal"></param>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.Core.DAL.Linq.ProviderBase`2.Delete(`0)">
            <summary>
            删除实体对象
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.Core.DAL.Linq.ProviderBase`2.Insert(`0,LJH.GeneralLibrary.Core.DAL.IUnitWork)">
            <summary>
            通过工作单元插入实体对象，实际插入发生在工作单元提交时
            </summary>
            <param name="info"></param>
            <param name="unitWork"></param>
        </member>
        <member name="M:LJH.GeneralLibrary.Core.DAL.Linq.ProviderBase`2.Update(`0,`0,LJH.GeneralLibrary.Core.DAL.IUnitWork)">
            <summary>
            通过工作单元更新实体对象，实际更新发生在工作单元提交时
            </summary>
            <param name="newVal"></param>
            <param name="originalVal"></param>
            <param name="unitWork"></param>
        </member>
        <member name="M:LJH.GeneralLibrary.Core.DAL.Linq.ProviderBase`2.Delete(`0,LJH.GeneralLibrary.Core.DAL.IUnitWork)">
            <summary>
            通过工作单元删除实体对象，实际删除发生在工作单元提交时
            </summary>
            <param name="info"></param>
            <param name="unitWork"></param>
        </member>
        <member name="T:LJH.GeneralLibrary.Core.DAL.Linq.LinqUnitWork">
            <summary>
            表示LINQ单元操作
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.Core.DAL.Linq.LinqUnitWork.Commit">
            <summary>
            提交事务
            </summary>
            <returns></returns>
        </member>
        <member name="P:LJH.GeneralLibrary.Core.DAL.Linq.LinqUnitWork.DataContext">
            <summary>
            获取执行单元的数据上下文
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.Core.DAL.IProvider`2.GetByID(`1)">
            <summary>
            通过ID获取对像
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.Core.DAL.IProvider`2.GetItems(LJH.GeneralLibrary.SearchCondition)">
            <summary>
            通过查询条件获取对象
            </summary>
            <param name="search"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.Core.DAL.IProvider`2.Insert(`0)">
            <summary>
            插入对象
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.Core.DAL.IProvider`2.Update(`0,`0)">
            <summary>
            更新对象
            </summary>
            <param name="newVal"></param>
            <param name="originalVal"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.Core.DAL.IProvider`2.Delete(`0)">
            <summary>
            删除对象
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.Core.DAL.IProvider`2.CreateUnitWork">
            <summary>
            创建操作单元
            </summary>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.Core.DAL.IProvider`2.Insert(`0,LJH.GeneralLibrary.Core.DAL.IUnitWork)">
            <summary>
            插入对象,这个操作属于一个单元操作的一部分
            </summary>
            <param name="t"></param>
            <param name="unitWork"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.Core.DAL.IProvider`2.Update(`0,`0,LJH.GeneralLibrary.Core.DAL.IUnitWork)">
            <summary>
            更新对象,这个操作属于一个单元操作的一部分
            </summary>
            <param name="t"></param>
            <param name="unitWork"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.Core.DAL.IProvider`2.Delete(`0,LJH.GeneralLibrary.Core.DAL.IUnitWork)">
            <summary>
            删除对象,这个操作属于一个单元操作的一部分
            </summary>
            <param name="t"></param>
            <param name="unitWork"></param>
            <returns></returns>
        </member>
        <member name="T:LJH.GeneralLibrary.Core.DAL.IUnitWork">
            <summary>
            表示一个单元操作,用于把多个操作组成一个事务操作.
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.Core.DAL.IUnitWork.Commit">
            <summary>
            提交操作
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Core.DAL.SQLConnectionURI.SQLType">
            <summary>
            获取或设置数据库类型
            </summary>
            <returns></returns>
        </member>
        <member name="P:LJH.GeneralLibrary.Core.DAL.SQLConnectionURI.ConnectString">
            <summary>
             获取或设置数据库连接字符串
            </summary>
            <returns></returns>
        </member>
        <member name="F:LJH.GeneralLibrary.ImportOption.Ignore">
            <summary>
            忽略
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.ImportOption.Override">
            <summary>
            覆盖
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.ImportOption.Append">
            <summary>
            追加
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.UpdateItem`1">
            <summary>
            表示一个修改项
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.UpdateItem`1.Key">
            <summary>
            获取或设置修改项的ID, 一般者了实体类的属性名称
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.UpdateItem`1.Value">
            <summary>
            获取或设置修改后的新值
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.UpdateItem`1.OriginalValue">
            <summary>
            获取或设置修改前的值 
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.DateTimeRange">
            <summary>
            表示一个时间段
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.DateTimeRange.Begin">
            <summary>
            开始时间(如果不指定为日期的最小值)
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.DateTimeRange.End">
            <summary>
            结束时间(如果不指定为日期的最大值)
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.QueryResult`1">
            <summary>
            查询数据返回单个对象时的查询结果
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.QueryResult`1.Result">
             <summary>
            获取或设置执行结果
             </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.QueryResult`1.Message">
            <summary>
            获取或设置执行结果的文字描述
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.QueryResult`1.QueryObject">
            <summary>
            获取或设置返回的查询对象
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.QueryResultList`1">
            <summary>
            查询数据返回结果集合
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:LJH.GeneralLibrary.QueryResultList`1.Result">
             <summary>
            获取或设置执行结果
             </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.QueryResultList`1.Message">
            <summary>
            获取或设置执行结果的文字描述
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.QueryResultList`1.QueryObjects">
            <summary>
            获取或设置返回的查询对象
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.QueryResultList`1.PageSize">
            <summary>
            获取或设置每页数据条数,为0时表示返回所有数据
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.QueryResultList`1.PageIndex">
            <summary>
            获取或设置当前页
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.QueryResultList`1.TotalCount">
            <summary>
            获取或设置查询到的总记录数
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.ResultCode">
            <summary>
            查询或执行操作的结果枚举
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.ResultCode.Successful">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.ResultCode.Fail">
             <summary>
            失败
             </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.ResultCode.NotConnected">
            <summary>
            连接失败
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.SearchCondition">
            <summary>
            表示数据库查询条件
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SearchCondition.PageSize">
            <summary>
            获取或设置每页数据条数
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SearchCondition.PageIndex">
            <summary>
            获取或设置当前页,从1开始递增
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.SortMode.None">
            <summary>
            不排序
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.SortMode.Asc">
            <summary>
            升序
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.SortMode.Desc">
            <summary>
            降序
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.IEntity`1">
            <summary>
            表示实体类接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:LJH.GeneralLibrary.WinformControl.MyTree.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.MyTree.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.MyTree.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.WinformControl.HandleEventGetPageData">
            <summary>
            委托，查询指定页面的数据
            </summary>
            <param name="index"></param>
            <param name="pagesize"></param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.UCPaging.#ctor">
            <summary>
            
            </summary>
        </member>
        <!-- 对于成员“F:LJH.GeneralLibrary.WinformControl.UCPaging.components”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:LJH.GeneralLibrary.WinformControl.UCPaging.Dispose(System.Boolean)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:LJH.GeneralLibrary.WinformControl.UCPaging.InitializeComponent”忽略有格式错误的 XML 注释 -->
        <member name="F:LJH.GeneralLibrary.WinformControl.FrmProcessing.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.FrmProcessing.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.FrmProcessing.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinformControl.HexTextBox.InputSpace">
            <summary>
            是否允许输入空格
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinformControl.HexTextBox.HexValue">
            <summary>
            获取或设置16进制字节组
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.WinformControl.HexTextBox.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.HexTextBox.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.HexTextBox.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.WinformControl.MyToolStrip">
            <summary>
            这个类继承自ToolStrip,用于解决窗体中使用UCFormView显示窗体时，工具栏需要按两次才有反应的问题。
            只需要将ClickThrough设置成True就可以了。具体原因可能与WINDOW的消息机制有关。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinformControl.MyToolStrip.ClickThrough">
            <summary>
            获取或设置当包含它的窗休没有获取焦点时工具栏是否响应
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.WinformControl.MyToolStrip.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.MyToolStrip.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.MyToolStrip.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.WinformControl.ComPortComboBox.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.ComPortComboBox.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.ComPortComboBox.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.CustomDataGridView.SelectRow(System.Windows.Forms.DataGridViewRow)">
            <summary>
            选择行
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.CustomDataGridView.UnSelectRow(System.Windows.Forms.DataGridViewRow)">
            <summary>
            取消行选定
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.CustomDataGridView.SelectAllRows">
            <summary>
            全选
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.CustomDataGridView.SelectNone">
            <summary>
            全不选
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.CustomDataGridView.Invert">
            <summary>
            反选
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.CustomDataGridView.IsRowSelected(System.Windows.Forms.DataGridViewRow)">
            <summary>
            行是否被选中
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="F:LJH.GeneralLibrary.WinformControl.CustomDataGridView.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.CustomDataGridView.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.CustomDataGridView.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.WinformControl.DBCTextBox">
            <summary>
            表示半角输入框，所有输入的字符串都会转换成半角字符串
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.WinformControl.DBCTextBox.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.DBCTextBox.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.DBCTextBox.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinformControl.DecimalTextBox.MinValue">
            <summary>
            获取或设置允许输入的最小值
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinformControl.DecimalTextBox.MaxValue">
            <summary>
            获取或设置允许输入的最大值
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinformControl.DecimalTextBox.PointCount">
            <summary>
            获取或设置显示成文字时的小位点后位数,如果指定为-1则表示不强制显示小数点
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.WinformControl.DecimalTextBox.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.DecimalTextBox.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.DecimalTextBox.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.WinformControl.AddressComboBox.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.AddressComboBox.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.AddressComboBox.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="E:LJH.GeneralLibrary.WinformControl.FormHeader.Click">
            <summary>
            当点击控析时产生此事件
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinformControl.FormHeader.RenderForm">
            <summary>
            获取或设置要显示的窗体
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.FormHeader.Active">
            <summary>
            设置成当前活动状态
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.FormHeader.Deactive">
            <summary>
            设置成当前为非活动状态
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.FormHeader.Fresh">
            <summary>
            刷新
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.WinformControl.FormHeader.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.FormHeader.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.FormHeader.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinformControl.IntergerTextBox.MinValue">
            <summary>
            获取或设置可以输入的最小值
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinformControl.IntergerTextBox.MaxValue">
            <summary>
            获取或设置可以输入的最大值
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.WinformControl.IntergerTextBox.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.IntergerTextBox.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.IntergerTextBox.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.WinformControl.PercentageProgressBar">
            <summary>
            表示一个显示百分比的进度条
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.PercentageProgressBar.#ctor">
            <summary>
            表示一个显示百分比的进度条
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.PercentageProgressBar.#ctor(System.ComponentModel.IContainer)">
            <summary>
            表示一个显示百分比的进度条
            </summary>
            <param name="container"></param>
        </member>
        <member name="P:LJH.GeneralLibrary.WinformControl.PercentageProgressBar.TextColor">
            <summary>
            获取或设置百分比颜色
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinformControl.PercentageProgressBar.TextFont">
            <summary>
            获取或设置百分比字体
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.PercentageProgressBar.WndProc(System.Windows.Forms.Message@)">
            <summary>
            处理Windows消息
            </summary>
            <param name="m"></param>
        </member>
        <member name="F:LJH.GeneralLibrary.WinformControl.PercentageProgressBar.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.PercentageProgressBar.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.PercentageProgressBar.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.UCDateTimeInterval.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinformControl.UCDateTimeInterval.ShowTime">
            <summary>
            是否显示时间
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinformControl.UCDateTimeInterval.StartDateTime">
            <summary>
            获取或设置开始时间
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinformControl.UCDateTimeInterval.EndDateTime">
            <summary>
            获取或设置结束时间
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.UCDateTimeInterval.SelectToday">
            <summary>
            选择今天
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.UCDateTimeInterval.SelectThisMonth">
            <summary>
            选择本月
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.UCDateTimeInterval.SelectThisQuarter">
            <summary>
            选择本季度
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.UCDateTimeInterval.SelectThisYear">
            <summary>
            选择本年
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.WinformControl.UCDateTimeInterval.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.UCDateTimeInterval.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.UCDateTimeInterval.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinformControl.UCIPTextBox.IP">
            <summary>
            获取或设置IP地址
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.UCIPTextBox.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.WinformControl.UCIPTextBox.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.UCIPTextBox.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.UCIPTextBox.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="E:LJH.GeneralLibrary.WinformControl.UCFormViewEx.FormActivated">
            <summary>
            当前显示哪个窗体时触发此事件
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.UCFormViewEx.HighLightForm(LJH.GeneralLibrary.WinformControl.FormHeader)">
            <summary>
            高亮显示窗体
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.UCFormViewEx.FreshHeader">
            <summary>
            刷新
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinformControl.UCFormViewEx.FormHeaderLength">
            <summary>
            获取或设置每个窗体标题栏的长度
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.UCFormViewEx.AddAForm(System.Windows.Forms.Form)">
            <summary>
            增加一个窗体
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.UCFormViewEx.ActiveForm(System.Windows.Forms.Form)">
            <summary>
            使某个窗体处理活动状态
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.UCFormViewEx.RemoveForm(System.Windows.Forms.Form)">
            <summary>
            移除一个窗体，如果在列表中存在的话
            </summary>
            <param name="frm"></param>
        </member>
        <member name="F:LJH.GeneralLibrary.WinformControl.UCFormViewEx.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.UCFormViewEx.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinformControl.UCFormViewEx.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.CsvHelper.Import(System.String,System.Text.Encoding)">
            <summary>
            从文件中导出数据
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinForm.FrmDetailBase`2.IsAdding">
            <summary>
            获取或设置是否是用于增加
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinForm.FrmDetailBase`2.IsForView">
            <summary>
            获取或设置是否是用于查看项目的明细
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinForm.FrmDetailBase`2.UpdatingItem">
            <summary>
            获取或设置要查看项的明细
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmDetailBase`2.ShowOperatorRights">
            <summary>
            显示操作的权限
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmDetailBase`2.ClearInput">
            <summary>
            清空上一次保存后的输入数据
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.WinForm.FrmDetailBase`2.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmDetailBase`2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmDetailBase`2.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.WinForm.FrmMasterBase`2._ShowingItems">
            <summary>
            当前正在显示的数据
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.WinForm.FrmMasterBase`2._Items">
            <summary>
            查询到的所有数据
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinForm.FrmMasterBase`2.ForSelect">
            <summary>
            获取或设置窗体是否是用来做选择用的,(此属性需要在窗体显示之前指定)
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinForm.FrmMasterBase`2.SelectedItem">
            <summary>
            获取或设置窗体在选择模式下的选择项
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinForm.FrmMasterBase`2.MultiSelect">
            <summary>
            获取或设置是否支持多选
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinForm.FrmMasterBase`2.SearchCondition">
            <summary>
            获取或设置查询条件
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmMasterBase`2.ReFreshData">
            <summary>
            从数据库重新获取数据并刷新数据显示
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmMasterBase`2.ShowOperatorRights">
            <summary>
            显示操作的权限
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmMasterBase`2.GetSelectedItems">
            <summary>
            获取选择的表格里面的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmMasterBase`2.ExportData">
            <summary>
            导出数据
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmMasterBase`2.SelectColumns">
            <summary>
            选择数据网格中要显示的列
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmMasterBase`2.PerformDeleteData">
            <summary>
            进行删除数据操作
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmMasterBase`2.PerformAddData">
            <summary>
            进行增加数据操作
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmMasterBase`2.PerformUpdateData">
            <summary>
            进行修改数据操作
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmMasterBase`2.FreshItem(`1)">
            <summary>
            更新本地数据里面的某个项
            </summary>
            <param name="newVal"></param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmMasterBase`2.GetConfig(System.String,System.String)">
            <summary>
            从某个配置文件中读取键为key的项的值
            </summary>
            <param name="file"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmMasterBase`2.SaveConfig(System.String,System.String,System.String)">
            <summary>
            将某个配置保存到某个配置文件中
            </summary>
            <param name="file"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmMasterBase`2.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmMasterBase`2.GetDetailForm">
            <summary>
            获取明细窗体
            </summary>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmMasterBase`2.GetDataSource">
            <summary>
            获取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmMasterBase`2.FreshStatusBar">
            <summary>
            刷新状态栏
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmMasterBase`2.DeletingItem(`1)">
            <summary>
            删除数据
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="F:LJH.GeneralLibrary.WinForm.FrmMasterBase`2.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmMasterBase`2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmMasterBase`2.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmGenericReportBase`2.ReFreshData">
            <summary>
            此方法暂时不用，只是为了实现接口用
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmGenericReportBase`2.ShowOperatorRights">
            <summary>
            显示操作的权限
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmGenericReportBase`2.FreshStatusBar">
            <summary>
            刷新状态栏
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmGenericReportBase`2.ShowRowBackColor">
            <summary>
            显示数据行的颜色
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmGenericReportBase`2.ExportData">
            <summary>
            导出数据
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmGenericReportBase`2.SelectColumns">
            <summary>
            选择数据网格中要显示的列
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmGenericReportBase`2.ShowItemsOnGrid(System.Collections.Generic.List{`1})">
            <summary>
            显示数据
            </summary>
            <param name="items">要显示的数据</param>
            <param name="reload">是否重新加载数据，如果为真，则表示先会清空之前的数据，否则保留旧有数据</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmGenericReportBase`2.GetRowTag(System.Windows.Forms.DataGridViewRow)">
            <summary>
            获取指定行的Tag实体数据
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmGenericReportBase`2.GetConfig(System.String,System.String)">
            <summary>
            从某个配置文件中读取键为key的项的值
            </summary>
            <param name="file"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmGenericReportBase`2.SaveConfig(System.String,System.String,System.String)">
            <summary>
            将某个配置保存到某个配置文件中
            </summary>
            <param name="file"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:LJH.GeneralLibrary.WinForm.FrmGenericReportBase`2.GridView">
            <summary>
            获取窗体的表格控件
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinForm.FrmGenericReportBase`2.PnlLeft">
            <summary>
            获取窗体的左侧边栏
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmGenericReportBase`2.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmGenericReportBase`2.ShowItemInGridViewRow(System.Windows.Forms.DataGridViewRow,`1)">
            <summary>
            在网格行中显示单个数据
            </summary>
            <param name="row"></param>
            <param name="item"></param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmGenericReportBase`2.GetDataSource">
            <summary>
            获取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmGenericReportBase`2.FilterData(System.Collections.Generic.List{`1})">
            <summary>
            筛选数据
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.WinForm.FrmGenericReportBase`2.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmGenericReportBase`2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmGenericReportBase`2.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmViewBase`2.ShowRowBackColor">
            <summary>
            显示数据行的颜色
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmViewBase`2.ExportData">
            <summary>
            导出数据
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmViewBase`2.SelectColumns">
            <summary>
            选择数据网格中要显示的列
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmViewBase`2.ShowItemsOnGrid(System.Collections.Generic.List{`1})">
            <summary>
            显示数据
            </summary>
            <param name="items">要显示的数据</param>
            <param name="reload">是否重新加载数据，如果为真，则表示先会清空之前的数据，否则保留旧有数据</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmViewBase`2.GetConfig(System.String,System.String)">
            <summary>
            从某个配置文件中读取键为key的项的值
            </summary>
            <param name="file"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmViewBase`2.SaveConfig(System.String,System.String,System.String)">
            <summary>
            将某个配置保存到某个配置文件中
            </summary>
            <param name="file"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmViewBase`2.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmViewBase`2.ShowOperatorRights">
            <summary>
            显示操作的权限
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmViewBase`2.GetDataSource">
            <summary>
            获取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmViewBase`2.ShowItemInGridViewRow(System.Windows.Forms.DataGridViewRow,`1)">
            <summary>
            在网格行中显示单个数据
            </summary>
            <param name="row"></param>
            <param name="item"></param>
        </member>
        <member name="F:LJH.GeneralLibrary.WinForm.FrmViewBase`2.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmViewBase`2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmViewBase`2.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmReportBaseWithPaging`2.ReFreshData">
            <summary>
            此方法暂时不用，只是为了实现接口用
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmReportBaseWithPaging`2.ShowOperatorRights">
            <summary>
            显示操作的权限
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmReportBaseWithPaging`2.ShowRowBackColor">
            <summary>
            显示数据行的颜色
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmReportBaseWithPaging`2.PerformExportData">
            <summary>
            导出数据
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmReportBaseWithPaging`2.PerformSelectColumns">
            <summary>
            选择数据网格中要显示的列
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmReportBaseWithPaging`2.ShowItemsOnGrid(LJH.GeneralLibrary.QueryResultList{`1})">
            <summary>
            显示数据
            </summary>
            <param name="resultList">要显示的数据</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmReportBaseWithPaging`2.GetRowTag(System.Windows.Forms.DataGridViewRow)">
            <summary>
            获取指定行的Tag实体数据
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmReportBaseWithPaging`2.GetConfig(System.String,System.String)">
            <summary>
            从某个配置文件中读取键为key的项的值
            </summary>
            <param name="file"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmReportBaseWithPaging`2.SaveConfig(System.String,System.String,System.String)">
            <summary>
            将某个配置保存到某个配置文件中
            </summary>
            <param name="file"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:LJH.GeneralLibrary.WinForm.FrmReportBaseWithPaging`2.GridView">
            <summary>
            获取窗体的表格控件
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinForm.FrmReportBaseWithPaging`2.PnlLeft">
            <summary>
            获取窗体的左侧边栏
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmReportBaseWithPaging`2.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmReportBaseWithPaging`2.ShowItemInGridViewRow(System.Windows.Forms.DataGridViewRow,`1)">
            <summary>
            在网格行中显示单个数据
            </summary>
            <param name="row"></param>
            <param name="item"></param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmReportBaseWithPaging`2.GetDataSource(System.Int32,System.Int32)">
            <summary>
            获取数据
            </summary>
            <returns></returns>
        </member>
        <member name="F:LJH.GeneralLibrary.WinForm.FrmReportBaseWithPaging`2.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmReportBaseWithPaging`2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmReportBaseWithPaging`2.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.WinForm.IFormMaster">
             <summary>
            
             </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.WinForm.FrmContactUs.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmContactUs.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmContactUs.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinForm.FrmColumnSelection.Selectee">
            <summary>
            获取或设置被选择列的网格控件
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinForm.FrmColumnSelection.SelectedColumns">
            <summary>
            获取或设置选取的所有列
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.WinForm.FrmColumnSelection.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmColumnSelection.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.FrmColumnSelection.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinForm.ItemUpdatedEventArgs.UpdatedItem">
            <summary>
            获取或设置更新后的对象
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinForm.ItemUpdatedEventArgs.PreUpdatingItem">
            <summary>
            获取或设置更新之前的对象
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinForm.RowChangeEventArgs.IsFirstRow">
            <summary>
            获取或设置是否是第一项
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinForm.RowChangeEventArgs.IsLastRow">
            <summary>
            获取或设置是否是最后一项
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.WinForm.RowChangeEventArgs.UpdatingItem">
            <summary>
            获取或设置当前行所指向的对象
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.WinForm.DataGridViewExporter">
            <summary>
            表示一个网格导出类，用于把网格数据导出到文件
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.DataGridViewExporter.Export(System.Windows.Forms.DataGridView,System.String,System.Boolean)">
            <summary>
            从网络中把数据导出到文件中（可以用电子表格软件打开)
            </summary>
            <param name="view"></param>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.NPOIExcelHelper.GetValue(NPOI.SS.UserModel.ICell)">
            <summary>
            获取单元格类型(xls)
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.NPOIExcelHelper.Import(System.String)">
            <summary>读取excel
            默认第一行为表头
            </summary>
            <param name="strFileName">excel文档路径</param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.NPOIExcelHelper.Export(System.Data.DataTable,System.String)">
            <summary>
            将数据从datatable导出到文件中
            </summary>
            <param name="dt"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.NPOIExcelHelper.Export(System.Windows.Forms.DataGridView,System.String,System.Boolean)">
            <summary>
            DataGridView导出到Excel文件
            </summary>
            <param name="dtSource">源DataTGridview</param>
            <param name="strHeaderText">表头文本</param>
            <param name="fileName">保存位置</param>
        </member>
        <member name="M:LJH.GeneralLibrary.WinForm.NPOIExcelHelper.Export(System.Windows.Forms.DataGridView,System.Boolean)">
            <summary>
            DataGridView导出到Excel文件, 带对话框
            </summary>
            <param name="dtSource">源DataTGridview</param>
            <param name="strHeaderText">表头文本</param>
            <param name="fileName">保存位置</param>
        </member>
        <member name="M:LJH.GeneralLibrary.DecimalExtention.Trim(System.Decimal)">
            <summary>
            去掉实数小数点后不必要的0,比如12.500 会变成12.5,12.00会变成12等
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.DecimalExtention.Convert(System.Decimal,System.Int32,System.Int32)">
            <summary>
            将一个实数按指定的舍入方式转换成指定小数点位数的实数
            </summary>
            <param name="value">要转换的实数</param>
            <param name="mode">指定的舍入方式 0表示非零进一，1表示银行家算法四舍五入 2表示直接截取</param>
            <param name="pointCount"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.DecimalExtention.Convert_总分(System.Decimal,System.Int32,System.Int32)">
            <summary>
            将一个实数按指定的舍入方式转换成指定小数点位数的实数
            </summary>
            <param name="value">要转换的实数</param>
            <param name="mode">指定的舍入方式 0表示非零进一，1表示四舍五入 2表示直接截取</param>
            <param name="pointCount"></param>
            <returns></returns>
        </member>
        <member name="F:LJH.GeneralLibrary.FrmSoftDogInfo.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.FrmSoftDogInfo.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:LJH.GeneralLibrary.FrmSoftDogInfo.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.HexStringConverter">
            <summary>
            十六进制字符串与字节组之间的转换器
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.HexStringConverter.StringToHex(System.String)">
            <summary>
            字符串转字节组
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.HexStringConverter.HexToString(System.Byte[],System.String)">
            <summary>
            字节组转十六进制字符串
            </summary>
            <param name="hexs"></param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.HexStringConverter.HexEquals(System.Byte[],System.Byte[])">
            <summary>
            十六进制字节组比较
            </summary>
            <param name="bytes1"></param>
            <param name="bytes2"></param>
            <returns></returns>
        </member>
        <member name="T:LJH.GeneralLibrary.FileLog">
            <summary>
            文件日志，把日志记录到文件中
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.FileLog.Log(System.String,System.String)">
            <summary>
            把内容content记录到日志名称为name的日志中
            本函数为线程串行访问，多线程并发时过多调用写日志功能会影响并发性能
            </summary>
            <param name="logName">日志名称</param>
            <param name="content">要记录的内容</param>
        </member>
        <member name="M:LJH.GeneralLibrary.FileLog.Log(System.String,System.String,System.String)">
            <summary>
            把内容content记录到日志名称为name的日志中
            本函数为线程串行访问，多线程并发时过多调用写日志功能会影响并发性能
            </summary>
            <param name="path">日志的路径</param>
            <param name="logName">日志名称</param>
            <param name="content">要记录的内容</param>
        </member>
        <member name="E:LJH.GeneralLibrary.Net.LJHSocket.OnDataArrivedEvent">
            <summary>
            数据到达事件
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.Net.LJHSocket.Open">
            <summary>
            连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.Net.LJHSocket.SendData(System.Byte[])">
            <summary>
            发送数据
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.Net.LJHSocket.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.Net.IPConverter.IPtoStr(System.Int32,System.Boolean)">
            <summary>
            将整形IP转化成字符串型的IP地址,semode表示整形是否是小端模式的整数
            </summary>
            <param name="ip"></param>
            <param name="semode"></param>
            <returns></returns>
        </member>
        <member name="T:LJH.GeneralLibrary.Net.NetTool">
            <summary>
            网络编程常用工具类
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.Net.NetTool.GetLocalIP">
            <summary>
            获取本机的IP地址,如果有多个IP，返回第一个IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.Net.NetTool.GetLocalMAC">
            <summary>
            获取系统MAC，如果有多个，返回第一个
            </summary>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.Net.NetTool.GetLocalMACs">
            <summary>
            获取本机的MAC地址,如果有多个，各个之前用逗号分开
            </summary>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.Net.NetTool.GetHostName">
            <summary>
            获取本机计算机名
            </summary>
            <returns></returns>
        </member>
        <member name="T:LJH.GeneralLibrary.Resources.Resource1">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.BillValidator_MOP10">
            <summary>
              查找类似 澳门币10元 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.BillValidator_MOP100">
            <summary>
              查找类似 澳门币100元 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.BillValidator_MOP20">
            <summary>
              查找类似 澳门币20元 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.BillValidator_MOP50">
            <summary>
              查找类似 澳门币50元 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.BillValidator_NoBillInfo">
            <summary>
              查找类似 无纸币信息 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_Accounts">
            <summary>
              查找类似 应收费用 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_Bill_ParkInterval">
            <summary>
              查找类似 {0}小时{1}分钟 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_CardID">
            <summary>
              查找类似 卡片编号 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_CarPlate">
            <summary>
              查找类似 车牌号码 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_CarType">
            <summary>
              查找类似 收费车型 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_Cash">
            <summary>
              查找类似 纸币数量 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_CashCountUnit">
            <summary>
              查找类似 张 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_CashUnit">
            <summary>
              查找类似 元 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_Change">
            <summary>
              查找类似 应找零金额 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_ChargeDateTime">
            <summary>
              查找类似 收费时间 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_CheckoutAmount">
            <summary>
              查找类似 结账金额 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_CheckoutBill">
            <summary>
              查找类似 结账小票 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_CheckoutDateTime">
            <summary>
              查找类似 结账时间 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_CheckoutOperator">
            <summary>
              查找类似 结账人员 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_Coin">
            <summary>
              查找类似 剩余硬币 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_CoinUnit">
            <summary>
              查找类似 个 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_Description">
            <summary>
              查找类似 异常描述 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_EnterDateTime">
            <summary>
              查找类似 入场时间 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_HadChange">
            <summary>
              查找类似 已找零金额 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_HavePaid">
            <summary>
              查找类似 已经收取 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_IncomeMoney">
            <summary>
              查找类似 收入金额 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_LastBalance">
            <summary>
              查找类似 上次结余 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_LastDateTime">
            <summary>
              查找类似 上次结账 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_MID">
            <summary>
              查找类似 缴费机号 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_Operator">
            <summary>
              查找类似 收费人员 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_Paid">
            <summary>
              查找类似 本次收取 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_PaidIn">
            <summary>
              查找类似 实缴费用 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_ParkInterval">
            <summary>
              查找类似 停车时长 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_PaymentBill">
            <summary>
              查找类似 临时卡缴费小票 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_PayMoney">
            <summary>
              查找类似 支出金额 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_Recharge_Amount">
            <summary>
              查找类似 充值金额 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_Recharge_Balance">
            <summary>
              查找类似 卡片余额 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_Recharge_Bill">
            <summary>
              查找类似 充值小票 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_Recharge_ChargeBalance">
            <summary>
              查找类似 充值后余额 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_Recharge_DateTime">
            <summary>
              查找类似 充值时间 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_Recharge_Number">
            <summary>
              查找类似 充值编号 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_Recharge_Payment">
            <summary>
              查找类似 实收金额 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_SerialNumber">
            <summary>
              查找类似 缴费编号 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_StationID">
            <summary>
              查找类似 收费站点 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_TariffType">
            <summary>
              查找类似 收费类型 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_TheBalance">
            <summary>
              查找类似 本次结余 的本地化字符串。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Resources.Resource1.EpsonMT532_TotalAmount">
            <summary>
              查找类似 钱箱总额 的本地化字符串。
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.RMBHelper.NumGetStr(System.Double)">
            <summary>
            金额小写转中文大写。
            整数支持到万亿；小数部分支持到分(超过两位将进行Banker舍入法处理)
            </summary>
            <param name="Num">需要转换的双精度浮点数</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:LJH.GeneralLibrary.RMBHelper.Reversion_Str(System.String)">
            <summary>  
            反转字符串  
            </summary>  
            <param name="Rstr">需要反转的字符串</param>  
            <returns>反转后的字符串</returns>  
        </member>
        <member name="T:LJH.GeneralLibrary.SEBinaryConverter">
            <summary>
            字节数据与整数之间的转换器，可以在整数与小端法表示的字节数组(即低字节在前，高位字节在后)之间相互转换
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.SEBinaryConverter.LongToBytes(System.Int64)">
            <summary>
            把长整形转换成字节数组
            </summary>
            <param name="t"></param>
            <returns>返回值为一个长度为8的字节数组</returns>
        </member>
        <member name="M:LJH.GeneralLibrary.SEBinaryConverter.IntToBytes(System.Int32)">
            <summary>
            把整形转换成字节的数组
            </summary>
            <param name="t"></param>
            <returns>返回值为一个长度为4的字节数组</returns>
        </member>
        <member name="M:LJH.GeneralLibrary.SEBinaryConverter.UintToBytes(System.UInt32)">
            <summary>
            把无符号整形转换成字节的数组
            </summary>
            <param name="t"></param>
            <returns>返回值为一个长度为4的字节数组</returns>
        </member>
        <member name="M:LJH.GeneralLibrary.SEBinaryConverter.ShortToBytes(System.Int16)">
            <summary>
            把短整形转换成字节数组
            </summary>
            <param name="t"></param>
            <returns>返回值是一个长度为2的字节数组</returns>
        </member>
        <member name="M:LJH.GeneralLibrary.SEBinaryConverter.BytesToLong(System.Byte[])">
            <summary>
            从字节数组生成长整形数
            </summary>
            <param name="bytes">字节数组的长度小于或等于8,否则产生InvalidCastException异常</param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.SEBinaryConverter.BytesToInt(System.Byte[])">
            <summary>
            从字节数组生成整形数
            </summary>
            <param name="bytes">字节数组的长度小于或等于4,否则产生InvalidCastException异常</param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.SEBinaryConverter.BytesToUint(System.Byte[])">
            <summary>
            从字节数组生成无符号整形数
            </summary>
            <param name="bytes">字节数组的长度小于或等于4,否则产生InvalidCastException异常</param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.SEBinaryConverter.BytesToShort(System.Byte[])">
            <summary>
            从字节数组生成短整形数
            </summary>
            <param name="bytes">字节数组的长度小于或等于2,否则产生InvalidCastException异常</param>
            <returns></returns>
        </member>
        <member name="T:LJH.GeneralLibrary.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Properties.Resources.arrow_up">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Properties.Resources.button_grey_close">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Properties.Resources.down">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Properties.Resources.img15">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.Properties.Resources.up">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.DTEncrypt">
            <summary>
            增强型字符串加解密算法
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.DTEncrypt.Encrypt(System.String)">
            <summary>
            加密字串
            </summary>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.DTEncrypt.DSEncrypt(System.String)">
            <summary>
            从字密明字串中解密获取明文
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.SoftDog.SoftDogReader.ReadDog">
            <summary>
            读取加密狗信息
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.SoftDog.SoftDogInfo">
            <summary>
            表示加密狗中保存的信息
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SoftDog.SoftDogInfo.ProjectNo">
            <summary>
            项目编号
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SoftDog.SoftDogInfo.ProjectName">
            <summary>
            获取或设置项目名称
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SoftDog.SoftDogInfo.SoftwareList">
            <summary>
            软件列表
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SoftDog.SoftDogInfo.StartDate">
            <summary>
            软件试用开始时间
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SoftDog.SoftDogInfo.Days">
            <summary>
            软件试用第一次时长(天)
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SoftDog.SoftDogInfo.ExpiredDate">
            <summary>
            过期日期
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SoftDog.SoftDogInfo.IsHost">
            <summary>
            获取或设置是否是主机加密狗
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SoftDog.SoftDogInfo.DBServer">
            <summary>
            获取或设置数据库服务器
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SoftDog.SoftDogInfo.DBName">
            <summary>
            获取或设置数据库名称
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SoftDog.SoftDogInfo.DBUser">
            <summary>
            获取或设置数据库用户名
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SoftDog.SoftDogInfo.DBPassword">
            <summary>
            获取或设置数据库密码
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SoftDog.SoftDogInfo.MAC">
            <summary>
            获取或设置授权可用的电脑的MAC,如果有多个，用逗号隔开
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SoftDog.SoftDogInfo.WebAPIUrl">
            <summary>
            获取或设置API URL
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.SoftDog.SoftDogInfo.DogDevice">
            <summary>
            获取或设置DOGINFO是否是从硬件加密狗中获取而来
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.SoftDog.SoftwareType">
            <summary>
            加密狗支持的软件类型
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.SoftDog.SoftwareType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.SoftDog.SoftwareType.TYPE_Inventory">
            <summary>
            进销存软件
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.SoftDog.SoftwareType.TYPE_TA">
            <summary>
            考勤软件
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.SoftDog.SoftwareType.TYPE_ACS">
            <summary>
            门禁软件
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.SoftDog.SoftwareType.TYPE_汇海中考软件">
            <summary>
            汇海中考软件
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.SoftDog.SoftwareType.TYPE_汇海学生体测软件">
            <summary>
            汇海学生体测软件
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.SoftDog.SoftwareType.TYPE_汇海国民体测软件">
            <summary>
            汇海国民体测软件
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.SoftDog.SoftwareType.TYPE_PARK">
            <summary>
            停车场
            </summary>
        </member>
        <member name="F:LJH.GeneralLibrary.SoftDog.SoftwareType.TYPE_SteelRollInventory_COST">
            <summary>
            带成本核算的铁皮卷进销存软件
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.CommPort">
            <summary>
            串口操作
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.CommPort.#ctor(System.Byte,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="portNum">串口号</param>
            <param name="baud">波特率</param>
        </member>
        <member name="P:LJH.GeneralLibrary.CommPort.PortOpened">
            <summary>
            获取串口当前是否打开
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.CommPort.Port">
            <summary>
            获取串口号
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.CommPort.BaudRate">
            <summary>
            获取或设置串口的波特率
            </summary>
        </member>
        <member name="P:LJH.GeneralLibrary.CommPort.DtrEnable">
            <summary>
            获取或设置一个值，该值在串行通信过程中启用数据终端就绪 (DTR) 信号。
            </summary>
        </member>
        <member name="E:LJH.GeneralLibrary.CommPort.OnDataArrivedEvent">
            <summary>
            数据到达事件（串口接收到数据后触发此事件将数据提供给上层应用）
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.CommPort.InitCommPort(System.String,System.Int32)">
            <summary>
            初始化串口
            </summary>
            <param name="_portNum">端口号</param>
            <param name="_settings">通信参数</param>
            <param name="_rThreshold">触发事件阀值</param>
        </member>
        <member name="M:LJH.GeneralLibrary.CommPort.Open">
            <summary>
            打开串口
            </summary>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.CommPort.Close">
            <summary>
            关闭串口
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.CommPort.SendData(System.Byte[])">
            <summary>
            将输出缓冲区中的数据发送出去
            </summary>
        </member>
        <member name="T:LJH.GeneralLibrary.DSEncrypt">
            <summary>
            字符串加解密类,加密一次得到密文,再加密一次得到明文 只能用于ASCII字串的加解密
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.DSEncrypt.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="codeWord">加密因子</param>
        </member>
        <member name="M:LJH.GeneralLibrary.DSEncrypt.Encrypt(System.String)">
            <summary>
            加密字串
            </summary>
            <param name="mstext">要加密的明文字串</param>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.ExceptionPolicy.HandleException(System.Exception,System.String)">
            <summary>
            处理异常
            </summary>
            <param name="ex">产生的异常</param>
            <param name="methodName">产生异常的方法名</param>
        </member>
        <member name="M:LJH.GeneralLibrary.ExceptionPolicy.HandleException(System.Exception)">
            <summary>
            处理异常
            </summary>
            <param name="ex">产生的异常</param>
        </member>
        <member name="T:LJH.GeneralLibrary.StringHelper">
            <summary>
            里面有一些关于字符串的帮助函数
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.StringHelper.ToSBC(System.String)">
             <summary>
             将字符串转换成全角
             </summary>
             <param name="input">任意字符串</param>
             <returns>全角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="M:LJH.GeneralLibrary.StringHelper.ToDBC(System.String)">
             <summary>效字符串转换成半角字符串 </summary>
             <param name="input">任意字符串</param>
             <returns>半角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="T:LJH.GeneralLibrary.TempFolderManager">
            <summary>
            一个管理停车场临时文件目录的管理器
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.TempFolderManager.GetCurrentFolder">
            <summary>
            获取当前的临时文件目录
            </summary>
            <returns></returns>
        </member>
        <member name="T:LJH.GeneralLibrary.SingleInstance">
            <summary>
            这个类用于控制应用程序一次只有一个实例运行
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.SingleInstance.ExistsProcess">
            <summary>
            操作系统上是否存在此应用程序的进程
            </summary>
            <returns></returns>
        </member>
        <member name="M:LJH.GeneralLibrary.SingleInstance.ShowSingleProcess">
            <summary>
            连接到打开的应用程序进程
            </summary>
        </member>
        <member name="M:LJH.GeneralLibrary.SingleInstance.ShowSingleProcess(System.Int32)">
            <summary>
            连接到打开的应用程的进程
            </summary>
        </member>
    </members>
</doc>
